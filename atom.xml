<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tclamb]]></title>
  <link href="http://tclamb.github.io/atom.xml" rel="self"/>
  <link href="http://tclamb.github.io/"/>
  <updated>2013-09-03T17:21:42-04:00</updated>
  <id>http://tclamb.github.io/</id>
  <author>
    <name><![CDATA[Thomas Lamb]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[lambda type erasure]]></title>
    <link href="http://tclamb.github.io/blog/2013/09/02/lambda-type-erasure/"/>
    <updated>2013-09-02T17:31:00-04:00</updated>
    <id>http://tclamb.github.io/blog/2013/09/02/lambda-type-erasure</id>
    <content type="html"><![CDATA[<p>Special thanks to <a href="http://stackoverflow.com/users/567292/ecatmur">ecatmur</a> at <a href="http://stackoverflow.com/">stackoverflow</a>, from whose <a href="http://stackoverflow.com/questions/11893141/inferring-the-call-signature-of-a-lambda-or-arbitrary-callable-for-make-functio">work</a> this is adapted. </p>

<h3 id="step-1-extract-the-call-signature-from-lambda-type">step 1: extract the call signature from lambda type</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="k">struct</span> <span class="n">remove_class</span> <span class="p">{};</span>
</span><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">R</span><span class="p">,</span> <span class="k">typename</span> <span class="n">C</span><span class="p">,</span> <span class="k">typename</span><span class="p">...</span> <span class="n">A</span><span class="o">&gt;</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">remove_class</span><span class="o">&lt;</span><span class="n">R</span><span class="p">(</span><span class="n">C</span><span class="o">::*</span><span class="p">)(</span><span class="n">A</span><span class="p">...)</span><span class="o">&gt;</span>       <span class="p">{</span> <span class="k">using</span> <span class="n">type</span> <span class="o">=</span> <span class="n">R</span><span class="p">(</span><span class="n">A</span><span class="p">...);</span> <span class="p">};</span>
</span><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">R</span><span class="p">,</span> <span class="k">typename</span> <span class="n">C</span><span class="p">,</span> <span class="k">typename</span><span class="p">...</span> <span class="n">A</span><span class="o">&gt;</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">remove_class</span><span class="o">&lt;</span><span class="n">R</span><span class="p">(</span><span class="n">C</span><span class="o">::*</span><span class="p">)(</span><span class="n">A</span><span class="p">...)</span> <span class="k">const</span><span class="o">&gt;</span> <span class="p">{</span> <span class="k">using</span> <span class="n">type</span> <span class="o">=</span> <span class="n">R</span><span class="p">(</span><span class="n">A</span><span class="p">...);</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="step-2-define-helper-type">step 2: define helper type</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">F</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="n">function_t</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span> <span class="k">typename</span> <span class="n">remove_class</span><span class="o">&lt;</span>
</span><span class="line">    <span class="n">decltype</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">std</span><span class="o">::</span><span class="n">remove_reference</span><span class="o">&lt;</span><span class="n">F</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">::</span><span class="k">operator</span><span class="p">()</span> <span class="p">)</span>
</span><span class="line"><span class="o">&gt;::</span><span class="n">type</span> <span class="o">&gt;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="step-3-define-helper-function">step 3: define helper function</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">F</span><span class="o">&gt;</span>
</span><span class="line"><span class="n">function_t</span><span class="o">&lt;</span><span class="n">F</span><span class="o">&gt;</span> <span class="n">make_function</span><span class="p">(</span><span class="n">F</span><span class="o">&amp;&amp;</span> <span class="n">functor</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">F</span><span class="o">&gt;</span><span class="p">(</span><span class="n">functor</span><span class="p">)};</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="example-usage">example usage</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="cm">/* identity function: decltype( f ) == std::function&lt;int(int)&gt; */</span>
</span><span class="line">    <span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="n">make_function</span><span class="p">([](</span><span class="kt">int</span> <span class="n">a</span><span class="p">){</span> <span class="k">return</span> <span class="n">a</span><span class="p">;</span> <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* zero function: decltype( make_function(g) ) == std::function&lt;int()&gt;</span>
</span><span class="line"><span class="cm">     * declared as mutable to test non-const R(C::*)(A...)</span>
</span><span class="line"><span class="cm">     * overload of remove_class</span>
</span><span class="line"><span class="cm">     * see 5.1.2:5 of standard for use of mutable with lambdas */</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="k">auto</span> <span class="n">g</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">]()</span> <span class="k">mutable</span> <span class="p">{</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">return</span> <span class="n">x</span><span class="p">;</span> <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* should return 0 */</span>
</span><span class="line">    <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">make_function</span><span class="p">(</span><span class="n">g</span><span class="p">)();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="putting-it-all-together">putting it all together</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="cp">#include &lt;functional&gt;</span>
</span><span class="line"><span class="cp">#include &lt;type_traits&gt;</span>
</span><span class="line"><span class="cp">#include &lt;utility&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">namespace</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="cm">/* SFNIAE helper struct for call signature extraction of</span>
</span><span class="line"><span class="cm">     * member functions */</span>
</span><span class="line">    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="k">struct</span> <span class="n">remove_class</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line">    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">R</span><span class="p">,</span> <span class="k">typename</span> <span class="n">C</span><span class="p">,</span> <span class="k">typename</span><span class="p">...</span> <span class="n">A</span><span class="o">&gt;</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">remove_class</span><span class="o">&lt;</span><span class="n">R</span><span class="p">(</span><span class="n">C</span><span class="o">::*</span><span class="p">)(</span><span class="n">A</span><span class="p">...)</span><span class="o">&gt;</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">using</span> <span class="n">type</span> <span class="o">=</span> <span class="n">R</span><span class="p">(</span><span class="n">A</span><span class="p">...);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">R</span><span class="p">,</span> <span class="k">typename</span> <span class="n">C</span><span class="p">,</span> <span class="k">typename</span><span class="p">...</span> <span class="n">A</span><span class="o">&gt;</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">remove_class</span><span class="o">&lt;</span><span class="n">R</span><span class="p">(</span><span class="n">C</span><span class="o">::*</span><span class="p">)(</span><span class="n">A</span><span class="p">...)</span> <span class="k">const</span><span class="o">&gt;</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">using</span> <span class="n">type</span> <span class="o">=</span> <span class="n">R</span><span class="p">(</span><span class="n">A</span><span class="p">...);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/* lambda functions are never volatile (see 5.1.2:5 of the standard)</span>
</span><span class="line"><span class="cm">     * these specializations are provided for completeness */</span>
</span><span class="line">    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">R</span><span class="p">,</span> <span class="k">typename</span> <span class="n">C</span><span class="p">,</span> <span class="k">typename</span><span class="p">...</span> <span class="n">A</span><span class="o">&gt;</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">remove_class</span><span class="o">&lt;</span><span class="n">R</span><span class="p">(</span><span class="n">C</span><span class="o">::*</span><span class="p">)(</span><span class="n">A</span><span class="p">...)</span> <span class="k">volatile</span><span class="o">&gt;</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">using</span> <span class="n">type</span> <span class="o">=</span> <span class="n">R</span><span class="p">(</span><span class="n">A</span><span class="p">...);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">R</span><span class="p">,</span> <span class="k">typename</span> <span class="n">C</span><span class="p">,</span> <span class="k">typename</span><span class="p">...</span> <span class="n">A</span><span class="o">&gt;</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">remove_class</span><span class="o">&lt;</span><span class="n">R</span><span class="p">(</span><span class="n">C</span><span class="o">::*</span><span class="p">)(</span><span class="n">A</span><span class="p">...)</span> <span class="k">const</span> <span class="k">volatile</span><span class="o">&gt;</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">using</span> <span class="n">type</span> <span class="o">=</span> <span class="n">R</span><span class="p">(</span><span class="n">A</span><span class="p">...);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">F</span><span class="o">&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="n">function_t</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span> <span class="k">typename</span> <span class="n">remove_class</span><span class="o">&lt;</span>
</span><span class="line">    <span class="n">decltype</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">std</span><span class="o">::</span><span class="n">remove_reference</span><span class="o">&lt;</span><span class="n">F</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">::</span><span class="k">operator</span><span class="p">()</span> <span class="p">)</span>
</span><span class="line"><span class="o">&gt;::</span><span class="n">type</span> <span class="o">&gt;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">F</span><span class="o">&gt;</span>
</span><span class="line"><span class="n">function_t</span><span class="o">&lt;</span><span class="n">F</span><span class="o">&gt;</span> <span class="n">make_function</span><span class="p">(</span><span class="n">F</span><span class="o">&amp;&amp;</span> <span class="n">functor</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">F</span><span class="o">&gt;</span><span class="p">(</span><span class="n">functor</span><span class="p">)};</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MathJax test]]></title>
    <link href="http://tclamb.github.io/blog/2013/09/01/mathjax-test/"/>
    <updated>2013-09-01T12:15:00-04:00</updated>
    <id>http://tclamb.github.io/blog/2013/09/01/mathjax-test</id>
    <content type="html"><![CDATA[<h3 id="some-integrals">some integrals</h3>
<p>$$\begin{align}
\int_0^\infty x^n e^{-ax} \,dx &amp;= \frac{n!}{a^{n+1}} &#92;\
\int_0^\infty e^{-ax} \sin(bx) \,dx &amp;= \frac{b}{a^2 + b^2} &#92;\
\int_0^\infty e^{-ax} \cos(bx) \,dx &amp;= \frac{a}{a^2 + b^2}
\end{align}$$</p>

<h3 id="currying">currying</h3>
<p>Given some function of three arguments $f : (X \times Y \times Z) \rightarrow N$, currying will transform $f$ into $\mathop{\mathrm{curry}}(f) : X \rightarrow \bigl( Y \rightarrow \left( Z \rightarrow N \right) \bigr)$, a chain of functions each taking one argument.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello, world!]]></title>
    <link href="http://tclamb.github.io/blog/2013/08/07/hello-world/"/>
    <updated>2013-08-07T17:22:00-04:00</updated>
    <id>http://tclamb.github.io/blog/2013/08/07/hello-world</id>
    <content type="html"><![CDATA[<blockquote><p>The most important thing I learned on Tralfamadore was that when a person dies he only appears to die. He is still very much alive in the past, so it is very silly for people to cry at his funeral. All moments, past, present and future, always have existed, always will exist. The Tralfamadorians can look at all the different moments just that way we can look at a stretch of the Rocky Mountains, for instance. They can see how permanent all the moments are, and they can look at any moment that interests them. It is just an illusion we have here on Earth that one moment follows another one, like beads on a string, and that once a moment is gone it is gone forever.</p><p>When a Tralfamadorian sees a corpse, all he thinks is that the dead person is in a bad condition in that particular moment, but that the same person is just fine in plenty of other moments. Now, when I myself hear that somebody is dead, I simply shrug and say what the Tralfamadorians say about dead people, which is &#8220;so it goes.”</p><footer><strong>&mdash; Kurt Vonnegut in <em>Slaughterhouse-Five</em></strong></footer></blockquote>
]]></content>
  </entry>
  
</feed>
